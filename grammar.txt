expr: KEYWORD: VAR IDENTIFIER EQ expr
    : comp_expr ((KEYWORD:AND|KEYWORD:OR) comp_expr)*

comp-expr : NOT comp_expr
          : arith-expr ((EQUIVALENT|LT|GT|LTE|GTE) arith_expr)*

arith_expr : term ((PLUS|MINUS) term)*

term: factor((MUL|DIV) factor)*

factor: PLUS|MINUS factor
      : power

power: atom(POW factor)*

call : atom(LPAREN (expr (COMMA expr)*)? RPAREN)?

atom: INT|FLOAT|IDENTIFIER
    : LPAREN expr RPAREN
    : list expr
    : if expr
    : for expr
    : while expr
    : func def

list expr: LSQAURE (expr (COMMA expr)*)? RSQUARE

if-expr : KEYWORD: IF expr KEYWORD: THEN expr
          (KEYWORD:ELIF expr KEYWORD:THEN expr)*
          (KEYWORD: ELSE expr)?(not mandatory)

for expr: KEYWORD: FOR IDENTIFIER EQ expr KEYWORD: TO expr
          (KEYWORD:STEP expr)? KEYWORD: THEN expr

while expr: KEYWORD: WHILE expr KEYWORD: THEN expr

func def : KEYWORD: FUN IDENTIFIER?
           LPARENT (IDENTIFIER (COMMA IDENTIFIER)* )? RPAREN
           ARROW expr

* means 0 or more
? means optional